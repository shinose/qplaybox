# set default language for buildsystem
  export LC_ALL=C

# set the distro name
DISTRO="QPLAYBOX"

PROJECT="cuboxi"

TARGET_ARCH="arm"

ROOT=`pwd`

PROJECT_DIR="$ROOT/tools"

CONCURRENCY_MAKE_LEVEL=8

LINUX_DEPENDS="$PROJECT_DIR/$PROJECT/linux/linux.$TARGET_ARCH.conf $ROOT/packages/linux/package.mk"

# include versioning

# VERSION: set full version, use "devel" for development version
  OPENELEC_VERSION="devel"

# OS_VERSION: OS Version
  OS_VERSION="5.0"

# ADDON_VERSION: Addon version
  ADDON_VERSION="4.3"


# read distro versioning if available
# Name of the Distro to build (full name, without special characters)
  DISTRONAME="qplaybox"

# short project description
  DESCRIPTION="Qplaybox is a remote queue and play box built on Kodi Entertainment Center"

# Welcome Message for e.g. SSH Server (up to 5 Lines)
  GREETING0="##############################################"
  GREETING1="# Qplaybox - queue and play on your TV       #"
  GREETING2="# ...... visit https://qplay.tv       ...... #"
  GREETING3="##############################################"
  GREETING4=""

# Root password to integrate in the target system
  ROOT_PASSWORD="qplaybox"

# Mediacenter to use (kodi / no)
  MEDIACENTER="kodi"

# Skins to install (Confluence)
# Space separated list is supported,
# e.g. SKINS="Confluence"
  SKINS="Confluence"

# Default Skin (Confluence)
  SKIN_DEFAULT="Confluence"

# install extra subtitle Fonts for KODI (yes / no)
  KODI_EXTRA_FONTS="yes"

# build and install 'RSXS' Screensaver (yes / no)
  KODI_SCR_RSXS="yes"

# build and install 'ProjectM' Visualization (yes / no)
  KODI_VIS_PROJECTM="yes"

# build and install 'GOOM' Visualization (yes / no)
  KODI_VIS_GOOM="yes"

# build and install 'Waveform' Visualization (yes / no)
  KODI_VIS_WAVEFORM="yes"

# build and install 'Spectrum' Visualization (yes / no)
  KODI_VIS_SPECTRUM="yes"

# build and install 'FishBMC' Visualization (yes / no)
  # does not work on RPi
  KODI_VIS_FISHBMC="yes"

# build and install espeak support (yes / no)
  ESPEAK_SUPPORT="yes"

# build and install with non-free support
# (RAR compression support in KODI) (yes / no)
  KODI_NONFREE_SUPPORT="yes"

# build and install with BluRay support (yes / no)
  KODI_BLURAY_SUPPORT="yes"

# build and install with BD+ support
# (BD+ decryption support in KODI) (yes / no)
  BLURAY_BDPLUS_SUPPORT="yes"

# build and install with AACS support
# (BD decryption support in KODI) (yes / no)
  BLURAY_AACS_SUPPORT="yes"

# build and install with DVDCSS support
# (DVD decryption support in KODI) (yes / no)
  KODI_DVDCSS_SUPPORT="yes"

# additional drivers to install:
# for a list of additinoal drivers see packages/linux-drivers
# Space separated list is supported,
# e.g. ADDITIONAL_DRIVERS="DRIVER1 DRIVER2"
  ADDITIONAL_DRIVERS="RTL8192CU RTL8192DU RTL8188EU RTL8812AU dvbhdhomerun"

# build and install bluetooth support (yes / no)
  BLUETOOTH_SUPPORT="yes"

# build and install with KODI webfrontend (yes / no)
  KODI_WEBSERVER_SUPPORT="yes"

# build and install Avahi (Zeroconf) daemon (yes / no)
  AVAHI_DAEMON="yes"

# build with UPnP support (yes / no)
  KODI_UPNP_SUPPORT="yes"

# build with MySQL support (yes / no)
  KODI_MYSQL_SUPPORT="yes"

# build xbmc with sshlib support (yes / no)
  KODI_SSHLIB_SUPPORT="yes"

# build xbmc with optical drive support (yes / no)
  KODI_OPTICAL_SUPPORT="yes"

# KODI Audio encoders for usage with optical drive support
# Space separated list is supported,
# e.g. KODI_AUDIOENCODER_ADDONS="ENCODER1 ENCODER2"
  KODI_AUDIOENCODER_ADDONS="flac lame vorbis wav"

# build with AirPlay support (stream videos from iDevices to KODI) (yes / no)
  KODI_AIRPLAY_SUPPORT="yes"

# build with AirTunes support (stream music from iDevices to KODI) (yes / no)
  KODI_AIRTUNES_SUPPORT="yes"

# build with libnfs support (mounting nfs shares with KODI) (yes / no)
  KODI_NFS_SUPPORT="yes"

# build with Samba Client support (mounting SAMBA shares with KODI) (yes / no)
  KODI_SAMBA_SUPPORT="yes"

# build with NFS support (mounting nfs shares via the OS) (yes / no)
  NFS_SUPPORT="yes"

# build with Samba Client support (mounting samba shares via the OS) (yes / no)
  SAMBA_SUPPORT="yes"

# build and install Samba Server (yes / no)
  SAMBA_SERVER="yes"

# build and install SFTP Server (yes / no)
  SFTP_SERVER="yes"

# build and install diskmounter support (udevil)
# this service provide auto mounting support for external drives in the
# mediacenter also automount internally drives at boottime via udev (yes / no)
  UDEVIL="yes"

# build and install exFAT fuse support (yes / no)
  EXFAT="yes"

# build and install NTFS-3G fuse support (yes / no)
  NTFS3G="yes"

# build and install hfs filesystem utilities (yes / no)
  HFSTOOLS="yes"

# Windowmanager to use (ratpoison / fluxbox / none)
  WINDOWMANAGER="fluxbox"

# build and install remote support (yes / no)
  REMOTE_SUPPORT="yes"

# build and install ATV IR remote support (yes / no)
  ATVCLIENT_SUPPORT="yes"

# build and install IRServer IR/LCD support (yes / no)
  IRSERVER_SUPPORT="yes"

# build and install Joystick support (yes / no)
  JOYSTICK_SUPPORT="yes"

# build and install CEC adapter support (yes / no)
  CEC_SUPPORT="yes"

# build and install iSCSI support - iscsistart (yes / no)
  ISCSI_SUPPORT="yes"

# LCD driver to Use - Possible drivers are ( Comma seperated:
# bayrad,CFontz,CFontz633,CFontzPacket,curses,CwLnx,dm140,
# ea65,EyeboxOne,g15,glcdlib,glk,hd44780,i2500vfd,
# icp_a106,imon,imonlcd,IOWarrior,irman,irtrans,
# joy,lb216,lcdm001,lcterm,lirc,lis,MD8800,mdm166a,
# ms6931,mtc_s16209x,MtxOrb,mx5000,NoritakeVFD,
# picolcd,pyramid,sed1330,sed1520,serialPOS,
# serialVFD,shuttleVFD,sli,stv5730,SureElec,svga,vlsys_m428
# 'all' compiles all drivers;
# 'all,!xxx,!yyy' de-selects previously selected drivers
# "none" for disable LCD support
  LCD_DRIVER="irtrans,imon,imonlcd,mdm166a,MtxOrb,lis,dm140,hd44780,CFontz,SureElec,vlsys_m428,serialVFD,shuttleVFD"

# Support for partitioning and formating disks in initramfs (yes / no)
# This adds support for parted and mkfs.ext3/4 to initramfs for OEM usage
  INITRAMFS_PARTED_SUPPORT="no"

# build with swap support (yes / no)
  SWAP_SUPPORT="no"

# swap support enabled per default (yes / no)
  SWAP_ENABLED_DEFAULT="no"

# swapfile size if SWAP_SUPPORT=yes in MB
  SWAPFILESIZE="256"

# build with installer (yes / no)
  INSTALLER_SUPPORT="yes"

# Testpackages for development (yes / no)
  TESTING="no"

# OEM packages for OEM's (yes / no)
  OEM_SUPPORT="no"

# build and install nano text editor (yes / no)
  NANO_EDITOR="yes"

# cron support (yes / no)
  CRON_SUPPORT="yes"

# Distribution Specific source location
  DISTRO_MIRROR="http://sources.openelec.tv/mirror"
  DISTRO_SRC="http://sources.openelec.tv/$OPENELEC_VERSION"

# Addon Server Url
  ADDON_SERVER_URL="http://addons.openelec.tv"

# set the addon dirs
  ADDON_PATH="$ADDON_VERSION/$PROJECT/$TARGET_ARCH"
  ADDON_URL="$ADDON_SERVER_URL/$ADDON_PATH"

# read project options if available
################################################################################
# setup system defaults
################################################################################

  # The TARGET_CPU variable controls which processor should be targeted for
  # generated code.
    case $TARGET_ARCH in
      arm)
        # TARGET_CPU:
        # arm2 arm250 arm3 arm6 arm60 arm600 arm610 arm620 arm7 arm7m arm7d
        # arm7dm arm7di arm7dmi arm70 arm700 arm700i arm710 arm710c
        # arm7100 arm720 arm7500 arm7500fe arm7tdmi arm7tdmi-s arm710t
        # arm720t arm740t strongarm strongarm110 strongarm1100
        # strongarm1110 arm8 arm810 arm9 arm9e arm920 arm920t arm922t
        # arm946e-s arm966e-s arm968e-s arm926ej-s arm940t arm9tdmi
        # arm10tdmi arm1020t arm1026ej-s arm10e arm1020e arm1022e
        # arm1136j-s arm1136jf-s mpcore mpcorenovfp arm1156t2-s
        # arm1176jz-s arm1176jzf-s cortex-a8 cortex-a9 cortex-r4
        # cortex-r4f cortex-m3 cortex-m1 xscale iwmmxt iwmmxt2 ep9312.
        TARGET_CPU="cortex-a9"

        # TARGET_FLOAT:
        # Specifies which floating-point ABI to use. Permissible values are:
        # soft softfp hard
        TARGET_FLOAT="hard"

        # TARGET_FPU:
        # This specifies what floating point hardware (or hardware emulation) is
        # available on the target. Permissible names are:
        # fpa fpe2 fpe3 maverick vfp vfpv3 vfpv3-fp16 vfpv3-d16 vfpv3-d16-fp16
        # vfpv3xd vfpv3xd-fp16 neon neon-fp16 vfpv4 vfpv4-d16 fpv4-sp-d16
        # neon-vfpv4.
        TARGET_FPU="neon"
        ;;
    esac

  # Bootloader to use (syslinux / u-boot / bcm2835-bootloader)
    BOOTLOADER="u-boot"

  # u-boot version to use (default)
    UBOOT_VERSION="imx6-cuboxi"

  # Configuration for u-boot
    UBOOT_CONFIG="mx6_cubox-i_config"

  # Target Configfile for u-boot
    UBOOT_CONFIGFILE=""

  # Kernel target for u-boot (default 'uImage' if BOOTLOADER=u-boot) (uImage / zImage)
    KERNEL_UBOOT_TARGET="zImage"

  # Kernel extra targets to build
    KERNEL_UBOOT_EXTRA_TARGET="imx6q-cubox-i.dtb imx6dl-cubox-i.dtb"
    KERNEL_UBOOT_EXTRA_TARGET="$KERNEL_UBOOT_EXTRA_TARGET imx6q-hummingboard.dtb imx6dl-hummingboard.dtb"

  # Additional kernel make parameters (for example to specify the u-boot loadaddress)
    KERNEL_MAKE_EXTRACMD=""

  # Kernel to use. values can be:
  # default:  default mainline kernel
    LINUX="imx6"


################################################################################
# setup build defaults
################################################################################

  # Build optimizations (size/normal)
    OPTIMIZATIONS="size"

  # Project CFLAGS
    PROJECT_CFLAGS=""

  # LTO (Link Time Optimization) support
    LTO_SUPPORT="yes"

  # GOLD (Google Linker) support
    GOLD_SUPPORT="yes"

  # SquashFS compression method (gzip / lzo / xz)
    SQUASHFS_COMPRESSION="gzip"


################################################################################
# setup project defaults
################################################################################

  # build and install ALSA Audio support (yes / no)
    ALSA_SUPPORT="yes"

  # OpenGL(X) implementation to use (no / Mesa)
    OPENGL="no"

  # OpenGL-ES implementation to use (no / bcm2835-driver / gpu-viv-bin-mx6q)
    OPENGLES="gpu-viv-bin-mx6q"

  # include uvesafb support (yes / no)
    UVESAFB_SUPPORT="no"

  # Displayserver to use (x11 / no)
    DISPLAYSERVER="no"

  # Windowmanager to use (ratpoison / fluxbox / none)
    WINDOWMANAGER="none"

  # Xorg Graphic drivers to use (all / i915,i965,r200,r300,r600,nvidia)
  # Space separated list is supported,
  # e.g. GRAPHIC_DRIVERS="i915 i965 r300 r600 radeonsi nvidia"
    GRAPHIC_DRIVERS=""

  # KODI Player implementation to use (default / bcm2835-driver / libfslvpuwrap)
    KODIPLAYER_DRIVER="libfslvpuwrap"

  # Modules to install in initramfs for early boot
    INITRAMFS_MODULES=""

  # additional Firmware to use (dvb-firmware, misc-firmware, wlan-firmware)
  # Space separated list is supported,
  # e.g. FIRMWARE="dvb-firmware misc-firmware wlan-firmware"
    FIRMWARE="misc-firmware wlan-firmware dvb-firmware brcmfmac_sdio-firmware"

  # build and install ATV IR remote support (yes / no)
    ATVCLIENT_SUPPORT="no"

  # build and install IRServer IR/LCD support (yes / no)
    IRSERVER_SUPPORT="no"

  # build with swap support (yes / no)
    SWAP_SUPPORT="no"

  # swap support enabled per default (yes / no)
    SWAP_ENABLED_DEFAULT="no"

  # swapfile size if SWAP_SUPPORT=yes in MB
    SWAPFILESIZE="128"

  # build with installer (yes / no)
    INSTALLER_SUPPORT="no"

  # build and install 'RSXS' Screensaver (yes / no)
    KODI_SCR_RSXS="no"

  # build and install 'ProjectM' Visualization (yes / no)
    KODI_VIS_PROJECTM="no"

  # build and install 'GOOM' Visualization (yes / no)
    KODI_VIS_GOOM="no"

  # build and install 'FishBMC' Visualization (yes / no)
    KODI_VIS_FISHBMC="no"

# Need to point to your actual cc
# If you have ccache installed, take care that LOCAL_CC don't point to it
  LOCAL_CC=`which gcc`

# Need to point to your actual g++
# If you have ccache installed, take care that LOCAL_CXX don't point to it
  LOCAL_CXX=`which g++`

# Support C++ in toolchain
  TOOLCHAIN_CXX="yes"

# verbose compilation mode (yes/no)
  VERBOSE="yes"

# Concurrency make level (-j option)
#  Try value 1 (default) to 4 on single CPU computer, or more on
#  multi-processor computer (like hyperthreading SMP CPU)
  if test -z "${CONCURRENCY_MAKE_LEVEL}"; then
    CONCURRENCY_MAKE_LEVEL=`cat /proc/cpuinfo | grep -c '^processor[[:cntrl:]]*:'`
  fi

# cache size for ccache
# Set the maximum size of the files stored in the cache. You can specify a
# value in gigabytes, megabytes or kilobytes by appending a G, M or K to the
# value. The default is gigabytes. The actual value stored is rounded down to
# the nearest multiple of 16 kilobytes.
  CCACHE_CACHE_SIZE="30G"

# forcing install of all packages (yes/no)
  FORCE_INSTALL="no"

# install devtools on development builds
  if [ "$OPENELEC_VERSION" = "devel" ]; then
    DEVTOOLS=yes
  fi

# Graphics Options

if [ "$DISPLAYSERVER" = "x11" ]; then
  SDL_SUPPORT="yes"
else
  SDL_SUPPORT="no"
fi

if [ "$OPENGL" = no ]; then
  OPENGL_SUPPORT="no"
else
  OPENGL_SUPPORT="yes"
fi

if [ "$OPENGLES" = no ]; then
  OPENGLES_SUPPORT="no"
else
  OPENGLES_SUPPORT="yes"
fi

if [ "$SDL_SUPPORT" = no ]; then
  JOYSTICK_SUPPORT="no"
fi

if [ "$OPENGL_SUPPORT" = no ]; then
  KODI_SCR_RSXS="no"
  KODI_VIS_PROJECTM="no"
  KODI_VIS_GOOM="no"
fi


# Path Variables

set -e

# include functions
. tools/functions

# setup initial dirs (relative to root)
  CONFIG=tools
  SCRIPTS=tools
  PACKAGES=packages
  SOURCES=sources
  BUILD_BASE=build
  TARGET=target
  ADDONS=addons

# arm specific options

# determines TARGET_CPU, if not forced by user
  if [ -z "$TARGET_CPU" ]; then
    TARGET_CPU=cortex-a9
  fi

# TARGET_CPU:
# arm2 arm250 arm3 arm6 arm60 arm600 arm610 arm620 arm7 arm7m arm7d
# arm7dm arm7di arm7dmi arm70 arm700 arm700i arm710 arm710c
# arm7100 arm720 arm7500 arm7500fe arm7tdmi arm7tdmi-s arm710t
# arm720t arm740t strongarm strongarm110 strongarm1100
# strongarm1110 arm8 arm810 arm9 arm9e arm920 arm920t arm922t
# arm946e-s arm966e-s arm968e-s arm926ej-s arm940t arm9tdmi
# arm10tdmi arm1020t arm1026ej-s arm10e arm1020e arm1022e
# arm1136j-s arm1136jf-s mpcore mpcorenovfp arm1156t2-s
# arm1176jz-s arm1176jzf-s cortex-a8 cortex-a9 cortex-r4
# cortex-r4f cortex-m3 cortex-m1 xscale iwmmxt iwmmxt2 ep9312.

# TARGET_FPU:
# This specifies what floating point hardware (or hardware emulation) is
# available on the target. Permissible names are:
# fpa fpe2 fpe3 maverick vfp vfpv3 vfpv3-fp16 vfpv3-d16 vfpv3-d16-fp16
# vfpv3xd vfpv3xd-fp16 neon neon-fp16 vfpv4 vfpv4-d16 fpv4-sp-d16
# neon-vfpv4.

# determine architecture's family
  case $TARGET_CPU in
    arm1176jzf-s)
      TARGET_SUBARCH=armv6zk
      TARGET_ABI=eabi
      TARGET_EXTRA_FLAGS="-mcpu=$TARGET_CPU"
      TARGET_FPU_FLAGS="-mfloat-abi=$TARGET_FLOAT -mfpu=$TARGET_FPU"
      SIMD_SUPPORT="no"
      ;;
    cortex-a7|cortex-a15)
      TARGET_SUBARCH=armv7ve
      TARGET_ABI=eabi
      TARGET_EXTRA_FLAGS="-mcpu=$TARGET_CPU"
      TARGET_FPU_FLAGS="-mfloat-abi=$TARGET_FLOAT -mfpu=$TARGET_FPU"
      SIMD_SUPPORT="yes"
      ;;
    cortex-a5|cortex-a8|cortex-a9)
      TARGET_SUBARCH=armv7-a
      TARGET_ABI=eabi
      TARGET_EXTRA_FLAGS="-mcpu=$TARGET_CPU"
      TARGET_FPU_FLAGS="-mfloat-abi=$TARGET_FLOAT -mfpu=$TARGET_FPU"
      SIMD_SUPPORT="yes"
      ;;
  esac

# setup ARCH specific *FLAGS
  TARGET_CFLAGS="-march=$TARGET_SUBARCH -mabi=aapcs-linux -Wno-psabi -Wa,-mno-warn-deprecated $TARGET_EXTRA_FLAGS"
  [ -n "$TARGET_FPU" ] && TARGET_CFLAGS="$TARGET_CFLAGS $TARGET_FPU_FLAGS"
  TARGET_LDFLAGS="-march=$TARGET_SUBARCH -mtune=$TARGET_CPU"
  GCC_OPTS="--with-abi=aapcs-linux --with-arch=$TARGET_SUBARCH --with-float=$TARGET_FLOAT --with-fpu=$TARGET_FPU"


HOST_NAME=`$LOCAL_CC -dumpmachine`
TARGET_NAME=$(echo $TARGET_SUBARCH | sed -e "s,-,,")-qplaybox-linux-gnu${TARGET_ABI}

BUILD=$BUILD_BASE.$DISTRONAME-$PROJECT.$TARGET_ARCH-$OPENELEC_VERSION
if [ -n "$BUILD_SUFFIX" ]; then
  BUILD=$BUILD-$BUILD_SUFFIX
fi

TARGET_IMG=$ROOT/$TARGET
TARGET_ADDONS="$TARGET_IMG/$ADDONS/$ADDON_PATH"
ADDON_BUILD="$BUILD/$ADDONS/$1"
STAMPS_NOARCH=.stamps
STAMPS=$BUILD/.stamps
STAMPS_INSTALL=$BUILD/image/.stamps
DOCS=DOCS
TOOLCHAIN=$BUILD/toolchain
SYSROOT_PREFIX=$ROOT/$TOOLCHAIN/$TARGET_NAME/sysroot
LIB_PREFIX=$SYSROOT_PREFIX/usr
TARGET_PREFIX=$ROOT/$TOOLCHAIN/bin/$TARGET_NAME-

FAKEROOT_SCRIPT=$ROOT/.fakeroot.$PROJECT.$TARGET_ARCH

if [ -z "$INSTALL" ]; then
  INSTALL=$BUILD/image/system
fi
INSTALL_INIT=$BUILD/image/initramfs/root-image

# Sourceforge download site
  SOURCEFORGE_SRC="http://prdownloads.sourceforge.net"

MAKE="$ROOT/$TOOLCHAIN/bin/make"
MAKEINSTALL="$ROOT/$TOOLCHAIN/bin/make -j1 DESTDIR=$SYSROOT_PREFIX install"
SED="sed -i"

# set package metadata
  PKG_NAME="$1"
  PKG_VERSION="0.0invalid"
  PKG_REV="0"
  PKG_ARCH="any"
  PKG_LICENSE="unknown"
  PKG_SITE=""
  PKG_URL=""
  PKG_DEPENDS_TARGET=""
  PKG_DEPENDS_HOST=""
  PKG_DEPENDS_INIT=""
  PKG_DEPENDS_BOOTSTRAP=""
  PKG_PRIORITY="optional"
  PKG_SECTION=""
  PKG_SHORTDESC="$1 (autogenerated)"
  PKG_LONGDESC=""
  PKG_IS_ADDON="no"

  if [ -n "$1" ]; then
    _PKG_ROOT_NAME=$(echo $1 | cut -d: -f1)
    _ALL_DIRS=""
    _FOUND=0
    PKG_DIR=""


    # first check project folder for a package
    for DIR in $(find $ROOT/tools/$PROJECT/packages -type d -name $_PKG_ROOT_NAME 2>/dev/null); do
      if [ -r "$DIR/package.mk" ]; then
        # found first, set $PKG_DIR
        PKG_DIR="$DIR"
        # keep track of dirs with package.mk for detecting multiple folders
        _ALL_DIRS="${_ALL_DIRS}${DIR}\\n"
        _FOUND=$((_FOUND+1))
        if [ $_FOUND -gt 1 ]; then
          # _FOUND more ? fail
          echo "Error - multiple package folders:"
          echo -e "$_ALL_DIRS"
          exit 1
        fi
      fi
    done


    # then check packages folder if not found already
    if [ $_FOUND -eq 0 ]; then
      for DIR in $(find $ROOT/$PACKAGES -type d -name $_PKG_ROOT_NAME 2>/dev/null); do
        if [ -r "$DIR/package.mk" ]; then
          # found first, set $PKG_DIR
          PKG_DIR="$DIR"
          # keep track of dirs with package.mk for detecting multiple folders
          _ALL_DIRS="${_ALL_DIRS}${DIR}\\n"
          _FOUND=$((_FOUND+1))
          if [ $_FOUND -gt 1 ]; then
            # found more ? fail
            echo "Error - multiple package folders:"
            echo -e "$_ALL_DIRS"
            exit 1
          fi
        fi
      done
    fi
  fi


  if [ -r $PKG_DIR/package.mk ]; then
    . $PKG_DIR/package.mk
  fi

  if [ "$PKG_IS_ADDON" = "yes" ] ; then
    [ -z $PKG_SECTION ] && PKG_ADDON_ID="$PKG_NAME" || PKG_ADDON_ID="`echo $PKG_SECTION | sed 's,/,.,g'`.$PKG_NAME"
  fi

  PKG_BUILD="$BUILD/${PKG_NAME}-${PKG_VERSION}"

XORG_PATH_DRI=/usr/lib/dri
XORG_PATH_XKB=/usr/share/X11/xkb
XORG_PATH_XKB_OUTPUT=/var/lib/xkb
XORG_PATH_RGB=/usr/lib/X11/rgb
XORG_PATH_MODULES=/usr/lib/xorg/modules
XORG_PATH_DRIVERS=/usr/lib/xorg/modules/drivers

SSL_CERTIFICATES="/etc/pki/tls"

TOOLCHAIN_LANGUAGES=c
[ "$TOOLCHAIN_CXX" = yes ] && TOOLCHAIN_LANGUAGES=${TOOLCHAIN_LANGUAGES},c++

unset TARGET_CPP

TARGET_CC=${TARGET_PREFIX}gcc
TARGET_CXX=${TARGET_PREFIX}g++
TARGET_LD=${TARGET_PREFIX}ld
TARGET_AS=${TARGET_PREFIX}as
TARGET_AR=${TARGET_PREFIX}ar
TARGET_NM=${TARGET_PREFIX}nm
TARGET_RANLIB=${TARGET_PREFIX}ranlib
TARGET_OBJCOPY=${TARGET_PREFIX}objcopy
TARGET_OBJDUMP=${TARGET_PREFIX}objdump
TARGET_STRIP=${TARGET_PREFIX}strip

. tools/optimize

TARGET_PKG_CONFIG_PATH=""
TARGET_PKG_CONFIG_LIBDIR="$SYSROOT_PREFIX/usr/lib/pkgconfig:$SYSROOT_PREFIX/usr/share/pkgconfig"
TARGET_PKG_CONFIG_SYSROOT_DIR="$SYSROOT_PREFIX"

unset HOST_CPP

HOST_AWK=gawk
HOST_CC=$ROOT/$TOOLCHAIN/bin/host-gcc
HOST_CXX=$ROOT/$TOOLCHAIN/bin/host-g++
HOST_LD=ld
HOST_AS=as
HOST_AR=ar
HOST_NM=nm
HOST_RANLIB=ranlib
HOST_OBJCOPY=objcopy
HOST_STRIP=strip

HOST_PKG_CONFIG_PATH=""
HOST_PKG_CONFIG_LIBDIR="$ROOT/$TOOLCHAIN/lib/pkgconfig:$ROOT/$TOOLCHAIN/share/pkgconfig"
HOST_PKG_CONFIG_SYSROOT_DIR=""

if [ -z "$CCACHE_DIR" ]; then
    export CCACHE_DIR=$HOME/.ccache-openelec
fi
export MAKEFLAGS=-j$CONCURRENCY_MAKE_LEVEL
export PKG_CONFIG=$ROOT/$TOOLCHAIN/bin/pkg-config

if [ -z "$PATH" -o "$PATH" = "${PATH#$ROOT/$TOOLCHAIN/bin:}" ]; then
  export PATH="$ROOT/$TOOLCHAIN/bin:$ROOT/$TOOLCHAIN/sbin:$PATH"
fi

if [ -z "$LD_LIBRARY_PATH" -o "$LD_LIBRARY_PATH" = "${LD_LIBRARY_PATH#$ROOT/$TOOLCHAIN/lib:}" ]; then
  export LD_LIBRARY_PATH="$ROOT/$TOOLCHAIN/lib:$LD_LIBRARY_PATH"
fi

VERSION_SUFFIX=$TARGET_ARCH

check_path
check_config

setup_toolchain target

SILENT_OUT=3
VERBOSE_OUT=4
if [ "$VERBOSE" = yes ]; then
  exec 3>&1
  exec 4>&2
else
  exec 3>&2
  exec 4>/dev/null
fi
BUILD_INDENT_SIZE=4

# define colors
  black="\e[0;30m"
  boldblack="\e[1;30m"
  red="\e[0;31m"
  boldred="\e[1;31m"
  green="\e[0;32m"
  boldgreen="\e[1;32m"
  yellow="\e[0;33m"
  boldyellow="\e[1;33m"
  blue="\e[0;34m"
  boldblue="\e[1;34m"
  magenta="\e[0;35m"
  boldmagenta="\e[1;35m"
  cyan="\e[0;36m"
  boldcyan="\e[1;36m"
  white="\e[0;37m"
  boldwhite="\e[1;37m"
  endcolor="\e[0m"

# multilib? nah
unset CONFIG_SITE

# meh suse
unset PYTHONSTARTUP
unset PYTHONPATH
